// Client automatically generated by SDKgen please do not edit this file manually
// @see https://sdkgen.app

package sdk

import (
	"bytes"
	"encoding/json"
	"errors"
	"github.com/apioo/sdkgen-go"
	"io"
	"net/http"

	"net/url"
)

type Client struct {
	internal *sdkgen.ClientAbstract
}

func (client *Client) History() *HistoryTag {
	return NewHistoryTag(client.internal.HttpClient, client.internal.Parser)
}

func (client *Client) Authorization() *AuthorizationTag {
	return NewAuthorizationTag(client.internal.HttpClient, client.internal.Parser)
}

func (client *Client) Meta() *MetaTag {
	return NewMetaTag(client.internal.HttpClient, client.internal.Parser)
}

// Generate Generates a new SDK from the provided input
func (client *Client) Generate(_type string, payload Passthru, namespace string, config string, baseUrl string) (GeneratorResponse, error) {
	pathParams := make(map[string]interface{})
	pathParams["type"] = _type

	queryParams := make(map[string]interface{})
	queryParams["namespace"] = namespace
	queryParams["config"] = config
	queryParams["baseUrl"] = baseUrl

	u, err := url.Parse(client.internal.Parser.Url("/generate/:type", pathParams))
	if err != nil {
		return GeneratorResponse{}, err
	}

	u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

	raw, err := json.Marshal(payload)
	if err != nil {
		return GeneratorResponse{}, err
	}

	var reqBody = bytes.NewReader(raw)

	req, err := http.NewRequest("POST", u.String(), reqBody)
	if err != nil {
		return GeneratorResponse{}, err
	}

	req.Header.Set("Content-Type", "application/json")

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return GeneratorResponse{}, err
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return GeneratorResponse{}, err
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var response GeneratorResponse
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return GeneratorResponse{}, err
		}

		return response, nil
	}

	switch resp.StatusCode {
	case 400:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return GeneratorResponse{}, err
		}

		return GeneratorResponse{}, &MessageException{
			Payload: response,
		}
	case 404:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return GeneratorResponse{}, err
		}

		return GeneratorResponse{}, &MessageException{
			Payload: response,
		}
	case 500:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return GeneratorResponse{}, err
		}

		return GeneratorResponse{}, &MessageException{
			Payload: response,
		}
	default:
		return GeneratorResponse{}, errors.New("the server returned an unknown status code")
	}
}

// GetTypes Shows all available generator types
func (client *Client) GetTypes() (GeneratorTypes, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})

	u, err := url.Parse(client.internal.Parser.Url("/types", pathParams))
	if err != nil {
		return GeneratorTypes{}, err
	}

	u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return GeneratorTypes{}, err
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return GeneratorTypes{}, err
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return GeneratorTypes{}, err
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var response GeneratorTypes
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return GeneratorTypes{}, err
		}

		return response, nil
	}

	switch resp.StatusCode {
	case 400:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return GeneratorTypes{}, err
		}

		return GeneratorTypes{}, &MessageException{
			Payload: response,
		}
	case 404:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return GeneratorTypes{}, err
		}

		return GeneratorTypes{}, &MessageException{
			Payload: response,
		}
	case 500:
		var response Message
		err = json.Unmarshal(respBody, &response)
		if err != nil {
			return GeneratorTypes{}, err
		}

		return GeneratorTypes{}, &MessageException{
			Payload: response,
		}
	default:
		return GeneratorTypes{}, errors.New("the server returned an unknown status code")
	}
}

func NewClient(baseUrl string, credentials sdkgen.CredentialsInterface) (*Client, error) {
	var client, err = sdkgen.NewClient(baseUrl, credentials)
	if err != nil {
		return &Client{}, err
	}

	return &Client{
		internal: client,
	}, nil
}
